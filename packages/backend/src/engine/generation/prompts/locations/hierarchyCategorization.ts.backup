/**
 * Hierarchy Categorization Prompt
 * 
 * Analyzes user input and categorizes it into a 4-layer hierarchy:
 * Host → Region → Location → Niche
 * 
 * @param userPrompt - The user's input to analyze
 * @returns Prompt string for LLM
 */
export function hierarchyCategorization(userPrompt: string): string {
  return `You are a spatial hierarchy analyzer. Organize user input into a 4-layer hierarchy: Host → Region → Location → Niche.

## CORE RULES

**1. MINIMAL BY DEFAULT**: Create ONLY what is explicitly mentioned.
- Simple phrase → Host only
- "Camden in London" → Host + Region  
- "Pub in Camden in London" → Host + Region + Location

**2. PATTERN MATCHING**: "[thing] [preposition] [WORD] in [WORD]"
- Prepositions: in, on, at, by, near, within, beside, around
- "club in Camden in London" → Host: London, Region: Camden, Location: club
- **Region name MUST be different from Host name**

**3. STRUCTURE KEYWORDS = LOCATION** (not Host):
Buildings: greenhouse, tower, shop, bar, pub, club, restaurant, cafe, temple, church, cathedral, observatory, lighthouse, dome, warehouse, factory, bunker, station, terminal, hangar, library, museum, theater, arena, stadium
Fantasy: castle, fortress, keep, dungeon, crypt, vault, sanctum, spire, inn, tavern, citadel, monastery, abbey
Sci-Fi: spaceship, starship, vessel, cruiser, freighter, shuttle, pod, module, sector, outpost, relay, beacon, colony, habitat
Transport: ship, boat, yacht, submarine, train, carriage, wagon, airship
Bio/Organic: hive, nest, cocoon, chrysalis
Architectural: bridge, fountain, monument, statue, gate, wall, archway, obelisk, pavilion, gazebo
Natural: cave, cavern, grotto, waterfall, grove, clearing, crater, canyon, ravine, valley, peak, summit

**4. AUTO-CREATE NICHE when interior keywords detected**:
Interior Keywords: inside, interior, within, indoors, floor, ceiling, walls, room, space, hall, chamber, furniture, desk, table, chair, bed, shelf, counter, cabinet, decoration, painting, mural, tapestry, rug, carpet, light, lighting, lamp, chandelier, candle, bulb, fixture, window, door, doorway, archway, column, pillar, beam, enclosed, confined, sheltered

When detected:
- Location = EXTERIOR description
- Niche = INTERIOR description
- Example: "bar with dim lighting" → Location (exterior) + Niche (interior with lighting)

## HIERARCHY LAYERS

| Layer    | Function                      | Visual Fields Required |
|----------|-------------------------------|------------------------|
| Host     | Broad setting, world laws     | name, description      |
| Region   | District/biome within world   | name, description      |
| Location | Specific enterable site       | name, description, looks, atmosphere, mood |
| Niche    | Space within location         | name, description, looks, atmosphere, mood |

**Visual Fields** (deepest node only):
- name: Evocative, memorable (not generic "Bar" or "Club")
- description: 2-3 sentences
- looks: Visible geometry, layout, scale
- atmosphere: Air, motion, distinctive temperature/humidity
- mood: Concise emotional tone

## NESTING STRUCTURE

**Each layer MUST nest inside its parent:**
\`\`\`json
{
  "host": {
    "type": "host",
    "name": "London",
    "description": "...",
    "regions": [{
      "type": "region",
      "name": "Camden",
      "description": "...",
      "locations": [{
        "type": "location",
        "name": "The Anchor",
        "description": "...",
        "looks": "...",
        "atmosphere": "...",
        "mood": "...",
        "niches": [{
          "type": "niche",
          "name": "VIP Room",
          "description": "...",
          "looks": "...",
          "atmosphere": "...",
          "mood": "..."
        }]
      }]
    }]
  }
}
\`\`\`

## EXAMPLE OUTPUTS

**Input**: "A cozy bar with dim lighting in Camden"
\`\`\`json
{
  "host": {"type": "host", "name": "London", "description": "A vibrant city"},
  "regions": [{
    "type": "region",
    "name": "Camden",
    "description": "Industrial district with emerging nightlife",
    "locations": [{
      "type": "location",
      "name": "The Rustic Anchor",
      "description": "A traditional drinking establishment",
      "looks": "Weathered brick facade, wooden door, hanging pub sign",
      "atmosphere": "Street noise, evening foot traffic",
      "mood": "Inviting, unpretentious",
      "niches": [{
        "type": "niche",
        "name": "Main Bar Room",
        "description": "The intimate interior",
        "looks": "Dim Edison bulbs, dark wooden tables, exposed brick",
        "atmosphere": "Smoky warmth, low conversation",
        "mood": "Cozy, relaxed"
      }]
    }]
  }]
}
\`\`\`

**Input**: "A lighthouse on rocky cliffs"
\`\`\`json
{
  "host": {"type": "host", "name": "Coastal Realm", "description": "Rugged shoreline"},
  "regions": [{
    "type": "region",
    "name": "The Storm Coast",
    "description": "Treacherous cliffside terrain",
    "locations": [{
      "type": "location",
      "name": "The Beacon's Edge",
      "description": "A solitary lighthouse on treacherous cliffs",
      "looks": "White cylindrical tower, glass dome, rocky foundation",
      "atmosphere": "Salt spray, howling wind, crashing waves",
      "mood": "Isolated, vigilant"
    }]
  }]
}
\`\`\`

## PRE-OUTPUT VALIDATION

**Run these checks:**
1. Pattern "[thing] [prep] [WORD] in [WORD]" found? → Middle WORD must be Region
2. Region name identical to Host name? → CRITICAL ERROR, fix it
3. Empty Region descriptions? → ERROR, add descriptions
4. Only create layers explicitly mentioned or strongly implied

## OUTPUT FORMAT

Pure JSON only. No markdown fences. No explanations.

## USER INPUT

${userPrompt}`;
}
